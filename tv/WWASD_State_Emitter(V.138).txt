//@version=6
indicator("WWASD_State_Emitter", overlay=true, scale=scale.none)

// ───────────────────────── Inputs (existing keep) ─────────────────────────
useDailyVWAP = input.bool(true, "Include Daily VWAP checks")
lookback     = input.int(20, "Structure Lookback (bars)", minval=5)

// ───────────────────────── New inputs (append-only) ─────────────────────────
group_rsi = "RSI (Daily)"
rsiLen    = input.int(14, "RSI Length", minval=2, group=group_rsi)
rsiOB     = input.int(70, "Overbought", minval=50, maxval=100, group=group_rsi)
rsiOS     = input.int(30, "Oversold",  minval=0,  maxval=50,  group=group_rsi)
rsiDivLen = input.int(10, "Divergence Pivot Len (daily)", minval=2, group=group_rsi)

// APPEND-ONLY: Indicator Blend (LTF rating drivers)
group_ind  = "Indicator Blend (LTF)"
mpvwap_anchor = input.string("Q", "MP-VWAP Anchor", options=["W","M","Q","Y"], group=group_ind)
rsi_tf       = input.string("1D", "RSI timeframe", options=["5","15","60","240","1D"], group=group_ind)
ob_enabled   = input.bool(false, "Order Blocks — enabled", group=group_ind)
ob_tf        = input.string("60", "Order Blocks — timeframe", options=["5","15","60","240","1D"], group=group_ind)
useEma12Rate = input.bool(true, "Include 1D EMA-12 in rating", group=group_ind)

// APPEND-ONLY: Friendly MP-VWAP anchor toggle to mirror standalone indicator UI
mpvwap_anchor_ui = input.string("Quarter", "MP-VWAP Anchor (friendly)", options=["Week","Month","Quarter","Year"], group=group_ind)

// Weights and scaling (0..1 weights; kv/ke are ATR scalers)
w_vwap = input.float(0.50, "w_vwap", minval=0.0, maxval=1.0, step=0.05, group=group_ind)
w_rsi  = input.float(0.50, "w_rsi",  minval=0.0, maxval=1.0, step=0.05, group=group_ind)
w_ema  = input.float(0.50, "w_ema",  minval=0.0, maxval=1.0, step=0.05, group=group_ind)
w_ob   = input.float(0.25, "w_ob",   minval=0.0, maxval=1.0, step=0.05, group=group_ind)
kv     = input.float(1.00, "kv (VWAP/ATR)", minval=0.1, maxval=10.0, step=0.1, group=group_ind)
ke     = input.float(1.00, "ke (EMA/ATR)",  minval=0.1, maxval=10.0, step=0.1, group=group_ind)

group_steak = "Steak (1D 12-EMA + QVWAP)"
qvwapAtrK   = input.float(0.50, "QVWAP ATR factor (band = ATR*factor)", minval=0.1, maxval=2.0, step=0.05, group=group_steak)

group_bias  = "Bias (Monday range only)"
useDO       = input.bool(true,  "Emit Daily-Open state", group=group_bias)   // ← restored (no DO removal)
useMon      = input.bool(true,  "Emit Monday range state", group=group_bias)

group_macro = "Macro (OTHERS vs STABLE)"
othersSym   = input.symbol("CRYPTOCAP:OTHERS.D",   "OTHERS.D",     group=group_macro)
stableSym   = input.symbol("CRYPTOCAP:STABLE.C.D", "STABLE.C.D",   group=group_macro)
macroDead   = input.float(0.20, "Dead-zone % (treat as flat)", minval=0, step=0.05, group=group_macro)
macroWeight = input.float(0.8, "Macro weight in rating", minval=0.0, maxval=1.0, step=0.1, group=group_macro)// ⬇️ Add these two lines directly under macroWeight (same group)
macroSigThr   = input.float(7.0,  "Macro signal threshold (5..10)", minval=5.0, maxval=10.0, step=0.1, group=group_macro)
macroRecenter = input.float(0.35, "Recenter in chop (0..1)",        minval=0.0, maxval=1.0,  step=0.05, group=group_macro)


group_alert = "Alerts / Guards"
dedupeBarsD = input.int(3, "A+ dedupe (daily bars)", minval=1, group=group_alert)

// ───────────────────────── Helpers ─────────────────────────
boolToStr(b) => b ? "true" : "false"
fmt1(x) => str.tostring(math.round(x*10.0)/10.0)
tanh(x) =>
    e2 = math.exp(2.0 * x)
    (e2 - 1.0) / (e2 + 1.0)
// pct change helper for macro
pct_change_daily(sym) =>
    c  = request.security(sym, "D", close,    barmerge.gaps_off, barmerge.lookahead_off)
    c1 = request.security(sym, "D", close[1], barmerge.gaps_off, barmerge.lookahead_off)
    na(c) or na(c1) or c1 == 0 ? 0.0 : ((c - c1) / c1) * 100.0

// ===================== 5m (added) =====================
var float lastPH_5 = na
var float prevPH_5 = na
var float lastPL_5 = na
var float prevPL_5 = na

ph_5 = request.security(syminfo.tickerid, "5", ta.pivothigh(high, lookback, lookback), barmerge.gaps_off, barmerge.lookahead_off)
pl_5 = request.security(syminfo.tickerid, "5", ta.pivotlow (low,  lookback, lookback), barmerge.gaps_off, barmerge.lookahead_off)

if not na(ph_5) and ph_5 != lastPH_5
    prevPH_5 := lastPH_5
    lastPH_5 := ph_5
if not na(pl_5) and pl_5 != lastPL_5
    prevPL_5 := lastPL_5
    lastPL_5 := pl_5

hh_5 = not na(lastPH_5) and not na(prevPH_5) and lastPH_5 > prevPH_5
hl_5 = not na(lastPL_5) and not na(prevPL_5) and lastPL_5 > prevPL_5
lh_5 = not na(lastPH_5) and not na(prevPH_5) and lastPH_5 < prevPH_5
ll_5 = not na(lastPL_5) and not na(prevPL_5) and lastPL_5 < prevPL_5

close_5     = request.security(syminfo.tickerid, "5", close,              barmerge.gaps_off, barmerge.lookahead_off)
ema100_5    = request.security(syminfo.tickerid, "5", ta.ema(close, 100), barmerge.gaps_off, barmerge.lookahead_off)
ema_state_5 = close_5 > ema100_5 ? "above" : "below"

// ───────────────────────── Original 15m block (with fix) ─────────────────────────
ema100_15    = ta.ema(close, 100)
ema_state_15 = close > ema100_15 ? "above" : "below"

var float lastPH_15 = na
var float prevPH_15 = na
var float lastPL_15 = na
var float prevPL_15 = na

ph_15 = request.security(syminfo.tickerid, "15", ta.pivothigh(high, lookback, lookback), barmerge.gaps_off, barmerge.lookahead_off)
pl_15 = request.security(syminfo.tickerid, "15", ta.pivotlow (low,  lookback, lookback), barmerge.gaps_off, barmerge.lookahead_off)

if not na(ph_15) and ph_15 != lastPH_15
    prevPH_15 := lastPH_15
    lastPH_15 := ph_15
// FIX: compare pl_15 to lastPL_15 (not ph_15 to lastPH_15)
if not na(pl_15) and pl_15 != lastPL_15
    prevPL_15 := lastPL_15
    lastPL_15 := pl_15

hh_15 = not na(lastPH_15) and not na(prevPH_15) and lastPH_15 > prevPH_15
hl_15 = not na(lastPL_15) and not na(prevPL_15) and lastPL_15 > prevPL_15
lh_15 = not na(lastPH_15) and not na(prevPH_15) and lastPH_15 < prevPH_15
ll_15 = not na(lastPL_15) and not na(prevPL_15) and lastPL_15 < prevPL_15

// ───────────────────────── Original 60m block (unchanged) ─────────────────────────
var float lastPH_60 = na
var float prevPH_60 = na
var float lastPL_60 = na
var float prevPL_60 = na

ph_60 = request.security(syminfo.tickerid, "60", ta.pivothigh(high, lookback, lookback), barmerge.gaps_off, barmerge.lookahead_off)
pl_60 = request.security(syminfo.tickerid, "60", ta.pivotlow (low,  lookback, lookback), barmerge.gaps_off, barmerge.lookahead_off)

if not na(ph_60) and ph_60 != lastPH_60
    prevPH_60 := lastPH_60
    lastPH_60 := ph_60
if not na(pl_60) and pl_60 != lastPL_60
    prevPL_60 := lastPL_60
    lastPL_60 := pl_60

close_60     = request.security(syminfo.tickerid, "60", close,              barmerge.gaps_off, barmerge.lookahead_off)
ema100_60    = request.security(syminfo.tickerid, "60", ta.ema(close, 100), barmerge.gaps_off, barmerge.lookahead_off)
ema_state_60 = close_60 > ema100_60 ? "above" : "below"

hh_60 = not na(lastPH_60) and not na(prevPH_60) and lastPH_60 > prevPH_60
hl_60 = not na(lastPL_60) and not na(prevPL_60) and lastPL_60 > prevPL_60
lh_60 = not na(lastPH_60) and not na(prevPH_60) and lastPH_60 < prevPH_60
ll_60 = not na(lastPL_60) and not na(prevPL_60) and lastPL_60 < prevPL_60

// ───────────────────────── Original 240m block (unchanged) ─────────────────────────
var float lastPH_240 = na
var float prevPH_240 = na
var float lastPL_240 = na
var float prevPL_240 = na

ph_240 = request.security(syminfo.tickerid, "240", ta.pivothigh(high, lookback, lookback), barmerge.gaps_off, barmerge.lookahead_off)
pl_240 = request.security(syminfo.tickerid, "240", ta.pivotlow (low,  lookback, lookback), barmerge.gaps_off, barmerge.lookahead_off)

if not na(ph_240) and ph_240 != lastPH_240
    prevPH_240 := lastPH_240
    lastPH_240 := ph_240
if not na(pl_240) and pl_240 != lastPL_240
    prevPL_240 := lastPL_240
    lastPL_240 := pl_240

close_240     = request.security(syminfo.tickerid, "240", close,              barmerge.gaps_off, barmerge.lookahead_off)
ema100_240    = request.security(syminfo.tickerid, "240", ta.ema(close, 100), barmerge.gaps_off, barmerge.lookahead_off)
ema_state_240 = close_240 > ema100_240 ? "above" : "below"

hh_240 = not na(lastPH_240) and not na(prevPH_240) and lastPH_240 > prevPH_240
hl_240 = not na(lastPL_240) and not na(prevPL_240) and lastPL_240 > prevPL_240
lh_240 = not na(lastPH_240) and not na(prevPH_240) and lastPH_240 < prevPH_240
ll_240 = not na(lastPL_240) and not na(prevPL_240) and lastPL_240 < prevPL_240

// ───────────────────────── Original 1D block (kept + steak tags) ─────────────────────────
var float lastPH_D = na
var float prevPH_D = na
var float lastPL_D = na
var float prevPL_D = na

ph_D = request.security(syminfo.tickerid, "D", ta.pivothigh(high, lookback, lookback), barmerge.gaps_off, barmerge.lookahead_off)
pl_D = request.security(syminfo.tickerid, "D", ta.pivotlow (low,  lookback, lookback), barmerge.gaps_off, barmerge.lookahead_off)

if not na(ph_D) and ph_D != lastPH_D
    prevPH_D := lastPH_D
    lastPH_D := ph_D
if not na(pl_D) and pl_D != lastPL_D
    prevPL_D := lastPL_D
    lastPL_D := pl_D

close_D      = request.security(syminfo.tickerid, "D", close,              barmerge.gaps_off, barmerge.lookahead_off)
ema100_D     = request.security(syminfo.tickerid, "D", ta.ema(close, 100), barmerge.gaps_off, barmerge.lookahead_off)
ema12_D      = request.security(syminfo.tickerid, "D", ta.ema(close, 12),  barmerge.gaps_off, barmerge.lookahead_off)
close_D_1    = request.security(syminfo.tickerid, "D", close[1],           barmerge.gaps_off, barmerge.lookahead_off)
ema12_D_1    = request.security(syminfo.tickerid, "D", ta.ema(close, 12)[1], barmerge.gaps_off, barmerge.lookahead_off)

ema_state_D   = close_D > ema100_D ? "above" : "below"
hh_D          = not na(lastPH_D) and not na(prevPH_D) and lastPH_D > prevPH_D
hl_D          = not na(lastPL_D) and not na(prevPL_D) and lastPL_D > prevPL_D
lh_D          = not na(lastPH_D) and not na(prevPH_D) and lastPH_D < prevPH_D
ll_D          = not na(lastPL_D) and not na(prevPL_D) and lastPL_D < prevPL_D
ema12_reclaim = close_D > ema12_D and close_D_1 <= ema12_D_1
ema12_loss    = close_D < ema12_D and close_D_1 >= ema12_D_1

ema12_state   = close_D > ema12_D ? "above" : "below"  // NEW explicit daily state
ema12_slopeUp = ema12_D > ema12_D_1
ema12_slopeDn = ema12_D < ema12_D_1

// ---- Daily VWAP (optional; original keep)
vwap_reclaim = useDailyVWAP ? request.security(syminfo.tickerid, "D", close > ta.vwap and close[1] <= ta.vwap, barmerge.gaps_off, barmerge.lookahead_off) : false
vwap_loss    = useDailyVWAP ? request.security(syminfo.tickerid, "D", close < ta.vwap and close[1] >= ta.vwap, barmerge.gaps_off, barmerge.lookahead_off) : false

// ---- RSI (Daily) and thresholds (upgraded to true daily)
rsiD         = request.security(syminfo.tickerid, "D", ta.rsi(close, rsiLen), barmerge.gaps_off, barmerge.lookahead_off)
rsi_overbought = rsiD > rsiOB
rsi_oversold   = rsiD < rsiOS
rsi_50_up    = rsiD > 50 and nz(rsiD[1]) <= 50
rsi_50_down  = rsiD < 50 and nz(rsiD[1]) >= 50

// Regular divergences at extremes only (daily)
phRSI = ta.pivothigh(rsiD, rsiDivLen, rsiDivLen)
plRSI = ta.pivotlow (rsiD, rsiDivLen, rsiDivLen)
phPX  = ta.pivothigh(close_D, rsiDivLen, rsiDivLen)
plPX  = ta.pivotlow (close_D, rsiDivLen, rsiDivLen)

var float prev_phRSI = na, var float last_phRSI = na
var float prev_phPX  = na, var float last_phPX  = na
var float prev_plRSI = na, var float last_plRSI = na
var float prev_plPX  = na, var float last_plPX  = na

if not na(phRSI) and not na(phPX)
    prev_phRSI := last_phRSI, last_phRSI := phRSI
    prev_phPX  := last_phPX,  last_phPX  := phPX
if not na(plRSI) and not na(plPX)
    prev_plRSI := last_plRSI, last_plRSI := plRSI
    prev_plPX  := last_plPX,  last_plPX  := plPX

reg_bear_div = not na(last_phRSI) and not na(prev_phRSI) and not na(last_phPX) and not na(prev_phPX) and (last_phPX > prev_phPX) and (last_phRSI < prev_phRSI) and (last_phRSI > rsiOB)
reg_bull_div = not na(last_plRSI) and not na(prev_plRSI) and not na(last_plPX) and not na(prev_plPX) and (last_plPX < prev_plPX) and (last_plRSI > prev_plRSI) and (last_plRSI < rsiOS)

// ───────────────────────── QVWAP (Quarterly-anchored, 4H) ─────────────────────────
qvwap_tuple_4H() =>
    var float cumPV = na
    var float cumV  = na
    // reset at quarter boundaries (Jan/Apr/Jul/Oct)
    newM = ta.change(time("M")) != 0
    newQ = newM and (month == 1 or month == 4 or month == 7 or month == 10)
    if newQ or na(cumPV) or na(cumV)
        cumPV := 0.0
        cumV  := 0.0
    cumPV += hlc3 * volume
    cumV  += volume
    vwap  = cumV > 0 ? cumPV / cumV : na
    atr   = ta.atr(14)
    band  = atr * qvwapAtrK
    slope = vwap - vwap[1]
    [vwap, band, slope]

// Compute on 4H bars
[qvwap4H, qBand4H, qSlope4H] = request.security(syminfo.tickerid, "240", qvwap_tuple_4H(), barmerge.gaps_off, barmerge.lookahead_off)
close_4H = request.security(syminfo.tickerid, "240", close, barmerge.gaps_off, barmerge.lookahead_off)

// Location vs band
qv_above     = close_4H > (qvwap4H + qBand4H)
qv_below     = close_4H < (qvwap4H - qBand4H)
qv_mid_upper = not qv_above and close_4H >= qvwap4H
qv_mid_lower = not qv_below and close_4H <  qvwap4H

qv_state = qv_above     ? "above" :
           qv_mid_upper ? "mid_to_upper" :
           qv_mid_lower ? "mid_to_lower" : "below"

// Reclaim/loss on 4H
qv_reclaim = close_4H > qvwap4H and close_4H[1] <= nz(qvwap4H[1])
qv_loss    = close_4H < qvwap4H and close_4H[1] >= nz(qvwap4H[1])

// Slope & flat detector aligned to 4H
qv_slopeUp = qSlope4H > 0
qv_slopeDn = qSlope4H < 0

atr4H    = request.security(syminfo.tickerid, "240", ta.atr(14), barmerge.gaps_off, barmerge.lookahead_off)
atrD     = request.security(syminfo.tickerid, "D",   ta.atr(14), barmerge.gaps_off, barmerge.lookahead_off)  // keep for other sections (LTF/EMA scoring)
flatSlope = math.abs(qSlope4H) < (0.05 * atr4H)  // 4H-based flatness

// ───────────────────────── Bias context (Monday) ─────────────────────────

[dDow, dHi, dLo] = request.security(syminfo.tickerid, "D", [dayofweek, high, low], barmerge.gaps_off, barmerge.lookahead_off)
isMon = dDow == dayofweek.monday
monHi = ta.valuewhen(isMon, dHi, 0)
monLo = ta.valuewhen(isMon, dLo, 0)
monInside = useMon and not na(monHi) and not na(monLo) ? (close_D <= monHi and close_D >= monLo) : false
monDevAbove = useMon and not na(monHi) and close_D > monHi
monDevBelow = useMon and not na(monLo) and close_D < monLo
var string mon_state = "inside"
var string mon_state_prev = "inside"
if barstate.isconfirmed
    mon_state_prev := mon_state
    mon_state := not useMon or (na(monHi) or na(monLo)) ? "inside" :
         monDevAbove ? "dev_above" :
         monDevBelow ? "dev_below" : "inside"
    if mon_state_prev != "inside" and mon_state == "inside"
        mon_state := "reclaim_inside"

// 15m Monday sweep helpers (re-entry into range after sweep)
// These read the daily Monday high/low (monHi/monLo) and detect 15m sweeps
mon_hi_swept_15 = request.security(syminfo.tickerid, "15", (high > monHi) and (close <= monHi and close >= monLo), barmerge.gaps_off, barmerge.lookahead_off)
mon_lo_swept_15 = request.security(syminfo.tickerid, "15", (low  < monLo) and (close <= monHi and close >= monLo), barmerge.gaps_off, barmerge.lookahead_off)

// Grace window: allow last 4 x 15m bars (~1h)
barsSinceSweep15 = request.security(syminfo.tickerid, "15", ta.barssince(((high > monHi) and (close <= monHi and close >= monLo)) or ((low  < monLo) and (close <= monHi and close >= monLo))), barmerge.gaps_off, barmerge.lookahead_off)
allowSweep = (barsSinceSweep15 >= 0) and (barsSinceSweep15 <= 4)

// ───────────────────────── Macro TREND v2 (OTHERS vs STABLE; 1H/4H/1D → 10/30/60) ─────────────────────────
pct_change_tf(sym, tf) =>
    request.security(sym, tf, na(close) or na(close[1]) or close[1]==0 ? na : ((cl
